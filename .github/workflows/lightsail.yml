# This workflow will build and push a new container image to AWS Lightsail Container,
# when there is a push to the "main" branch.

name: Deploy to AWS Lightsail Container

on:
    push:
        branches: ["main"]

env:
    IMAGE_TAG_PREFIX: ${{ vars.AWS_LIGHTSAIL_SERVICE }}

    permissions:
    contents: read

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: ECR
        strategy:
            matrix:
                IMAGE_TAG: [server] # [backend, frontend]

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Build
              env:
                  IMAGE_TAG: ${{ matrix.IMAGE_TAG }}
                  BUILD_ARG: ENVKEY=${{ secrets.ENVKEY }}
              run: |
                  docker build . -f ./docker/${{ env.IMAGE_TAG }}/Dockerfile -t ${{ env.IMAGE_TAG }} --build-arg ${{ env.BUILD_ARG }}

            - uses: aws-actions/setup-sam@v2
              with:
                  use-installer: true

            - uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ vars.AWS_REGION }}

            - name: Install AWS Lightsail plugin
              shell: bash
              run: |
                  sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
                  sudo chmod +x /usr/local/bin/lightsailctl

            - name: Install jq
              shell: bash
              run: |
                  sudo apt-get install jq

            - name: Delete old images
              env:
                  IMAGE_TAG: ${{ matrix.IMAGE_TAG }}
              shell: bash
              run: |
                  AWS_IMAGES=$(aws lightsail get-container-images --region ${{ vars.AWS_REGION }} --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} --output text)
                  AWS_IMAGE_NAMES=$(echo $AWS_IMAGES | grep -Eo ':${{ vars.AWS_LIGHTSAIL_SERVICE }}\.${{env.IMAGE_TAG_PREFIX}}-${{ matrix.IMAGE_TAG }}\.[0-9]+' || true)
                  echo $AWS_IMAGE_NAMES
                  FIRST=0
                  while read LINE; do
                      aws lightsail delete-container-image --region ${{ vars.AWS_REGION }} --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} --image $LINE || true;
                  done <<< $AWS_IMAGE_NAMES

            - name: Push image
              env:
                  IMAGE_TAG: ${{ matrix.IMAGE_TAG }}
              run: |
                  aws lightsail push-container-image --region ${{ vars.AWS_REGION }} --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} --label ${{env.IMAGE_TAG_PREFIX}}-${{ env.IMAGE_TAG }} --image ${{ env.IMAGE_TAG }}

            - name: Redeploy container
              run: |
                  LAST_DEPLOYMENT=$(aws lightsail get-container-service-deployments --region ${{ vars.AWS_REGION }} --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} --query "deployments[0]")
                  CONTAINER=$(echo $LAST_DEPLOYMENT | jq -r '.containers' | sed -E 's/.[0-9]+",/.latest",/g')
                  ENDPOINT=$(echo $LAST_DEPLOYMENT | jq -r '.publicEndpoint')
                  echo CONTAINER=$CONTAINER
                  echo ENDPOINT=$ENDPOINT
                  aws lightsail create-container-service-deployment --region ${{ vars.AWS_REGION }} --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} --containers "$CONTAINER" --public-endpoint "$ENDPOINT"
